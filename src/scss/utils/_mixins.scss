////
/// Mixins
/// @group Mixins
/// @author Noah Westwind
////

$bf: 16;

/// PX to EM breakpoint generator
/// @name PX to EM Breakpoints
/// @example
/// .element {
///   color: yellow;
///   @include bp(600) {
///     color: blue;
///   }
/// }
/// @example css - EM breakpoint
///   .element {
///     color: yellow;
///   }
///   @media (min-width: 37.5em) {
///     .element {
///       color: blue;
///     }
///   }
@mixin aspect-ratio($width, $height) {
   
    position: relative;
    &::before {
      display: block;
      content: "";
      width: 100%;
      padding-top: ($height / $width) * 100%;
    }
    > iframe,
    > video,
    > img,
    > div {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0; 
      height: 100%;
      width: 100%;
    }
  
}


@mixin bp($bp, $min-max: min-width) {
  $em: $bp/$bf;

  @media(#{$min-max}: #{$em}em) {
    @content;
  }
}


/// Float clearing helper.
/// @param {Bool} $extend [true] - Whether or not extend a placeholder.
/// @example @include clearfix();
///
@mixin clearfix($extend: true) {
  @if $extend {
    @extend %clearfix;
  }
  @else {
    &:after {
      content: "";
      display: table;
      clear: both;
    }
  }
}

/// Clearfix helper
/// @requires {mixin} clearfix
%clearfix {
  @include clearfix($extend: false);
}



@mixin mobile-xs {
  @media (max-width: #{$screen-xs}) {
    @content;
  }
}

@mixin mobile {
  @media (min-width: #{$screen-sm}) {
    @content;
  }
}

@mixin tablet {
  @media (min-width: #{$screen-md}) {
    @content;
  }
}

@mixin desktop {
  @media (min-width: #{$screen-lg}) {
    @content;
  }
}

@mixin desktop-xl {
  @media (min-width: #{$screen-xl}) {
    @content;
  }
}

@mixin desktop-xxl {
  @media (min-width: #{$screen-xxl}) {
    @content;
  }
}

@mixin retina {
  @media
    only screen and (-webkit-min-device-pixel-ratio: 2),
    only screen and (min--moz-device-pixel-ratio: 2),
    only screen and (-o-min-device-pixel-ratio: 2/1),
    only screen and (min-device-pixel-ratio: 2),
    only screen and (min-resolution: 192dpi),
    only screen and (min-resolution: 2dppx) {
    @content;
  }
}

@mixin print {
  @media print {
    @content;
  }
}

// Typograhpy / Rhythum
// Moving parts
// ⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻

// Given pixel inputs, print rem values with pixel fallbacks.
// Based on Bitmanic's rem mixin (https://github.com/bitmanic/rem)
//
// $property  - The css property name
// $px-values - The value or values (space-separated list) for $property, in pixels
@mixin px-to-rem($property, $px-values) {
  // Number of pixels in 1rem (default: 16px/rem)
  // When converting to rems, we must divide by this ratio.
  $px-per-rem: $base-font-size / 1rem;

  // Print the pixel fallback declaration first so we can override it in capable browsers.
  #{$property}: $px-values;

  // If there is only one value, print the declaration with the value converted to rems.
  @if type-of($px-values) == "number" {
    #{$property}: $px-values / $px-per-rem;
  }

  @else {
    // Otherwise, we've got a list and we'll need to convert each value in turn.
    // Create an empty list that we can dump values into.
    $rem-values: ();
    @each $value in $px-values {
      // If the value is zero, a string or a color, leave it be.
      @if $value == 0 or type-of($value) == "string" or type-of($value) == "color" {
        $rem-values: append($rem-values, $value);
      }
      @else {
        $rem-values: append($rem-values, $value / $px-per-rem);
      }
    }
    // Print the property and its list of converted values.
    #{$property}: $rem-values;
  }
}

// Return the height of n baselines.
// Returns px or rem based on the value of $rhythm-font-unit.
@function rhythm($lines: 1) {
  $line-height: if($rhythm-font-unit != px, $rem-line-height, $base-line-height);
  @return $line-height * $lines;
}

// Calculate the number of baselines required to accomodate a
// given pixel-based font size.
@function lines-for-font-size($font-size) {
  $lines: if(
    $round-to-nearest-half-line,
    ceil(2 * $font-size / $base-line-height) / 2,
    ceil($font-size / $base-line-height)
  );
  @if $lines * $base-line-height - $font-size < $min-line-padding * 2 {
    $lines: $lines + if($round-to-nearest-half-line, 0.5, 1);
  }
  @return $lines;
}

// Set type size and baseline grid on the root element.
@mixin establish-baseline {
  html {
    $new-font-size: $base-font-size / $browser-default-font-size * 100%;  // eg. 16px ÷ 16px * 100%
    // Only set the font size if it differs from the browser default
    @if $new-font-size != 100% {
      font-size: $new-font-size;
    }
    @include set-leading(1);
  }
}

// Set the font size to the specified number of pixels while
// maintaining the vertical rhythm.
//
// $to-size - Desired font size, in pixels
// $lines   - Desired leading, expressed in baselines (can fractional)
@mixin set-font-size($to-size, $lines: lines-for-font-size($to-size)) {
  @include px-to-rem(font-size, $to-size);
  @include set-leading($lines);
}

// Adjust the leading to a new multiple of the baseline
@mixin set-leading($lines) {
  @include px-to-rem(line-height, $base-line-height * $lines);
}

// Apply leading whitespace
@mixin leader($lines: 1, $property: margin) {
  @include px-to-rem(#{$property}-top, rhythm($lines));
}

// Apply trailing whitespace
@mixin trailer($lines: 1, $property: margin) {
  @include px-to-rem(#{$property}-bottom, rhythm($lines));
}

// Apply leading whitespace as padding
@mixin padding-leader($lines: 1) {
  @include leader($lines, padding);
}

// Apply trailing whitespace as padding
@mixin padding-trailer($lines: 1) {
  @include trailer($lines, padding);
}


// Apply leading and trailing whitespace together.
// Defaults to equal margins above and below and no padding.
@mixin rhythm-spacing($leader: 1, $trailer: $leader, $padding-leader: 0, $padding-trailer: $padding-leader) {
  @include leader($leader);
  @include trailer($trailer);
  @include padding-leader($padding-leader);
  @include padding-trailer($padding-trailer);
}
// Apply leading whitespace as margin
@mixin margin-leader($lines: 1) {
  @include leader($lines, margin);
}

// Apply trailing whitespace as margin
@mixin margin-trailer($lines: 1) {
  @include trailer($lines, margin);
}

// Apply leading and trailing whitespace together.
// Defaults to equal margins above and below and no padding.
@mixin rhythm-spacing($leader: 1, $trailer: $leader, $margin-leader: 0, $margin-trailer: $margin-leader) {
  @include leader($leader);
  @include trailer($trailer);
  @include margin-leader($margin-leader);
  @include margin-trailer($margin-trailer);
}

// Apply a border to one side of an element without throwing off
// the vertical rhythm. The available space ($lines) must be
// greater than the width of your border.
@mixin side-rhythm-border($side, $lines: 1, $border: $rule-width $rule-style $rule-color) {
  $width: nth($border, 1);
  $style: nth($border, 2);
  $color: nth($border, 3);
  @include px-to-rem(border-#{$side}, $width $style $color);

  $padding: ($base-line-height - $width) * $lines;
  @include px-to-rem(padding-#{$side}, $padding);
}

// Apply a leading rhythm border
@mixin leading-border($lines: 1, $border: $rule-width $rule-style $rule-color) {
  @include side-rhythm-border(top, $lines, $border);
}

// Apply a trailing rhythm border
@mixin trailing-border($lines: 1, $border: $rule-width $rule-style $rule-color) {
  @include side-rhythm-border(bottom, $lines, $border);
}

// Apply borders equally to all sides with padding to maintain the vertical rhythm
@mixin rhythm-borders($lines: 1, $border: $rule-width $rule-style $rule-color) {
  $width: nth($border, 1);
  $style: nth($border, 2);
  $color: nth($border, 3);
  @include px-to-rem(border, $width $style $color);

  $padding: ($base-line-height - $width) * $lines;
  @include px-to-rem(padding, $padding);
}


@mixin stack-spacing() {
  // column bottom margin on mobile and collapse component last elem margin

  & > *:last-child,
  & > *:last-child > *:last-child,
  & > *:last-child > *:last-child > *:last-child,
  & > *:last-child > *:last-child > *:last-child > *:last-child,
  & > *:last-child > *:last-child > *:last-child > *:last-child > *:last-child,
  & > *:last-child > *:last-child > *:last-child > *:last-child > *:last-child > *:last-child,
  & > *:last-child > *:last-child > *:last-child > *:last-child > *:last-child > *:last-child > *:last-child,
  & > *:last-child > *:last-child > *:last-child > *:last-child > *:last-child > *:last-child > *:last-child, > *:last-child {
      margin-bottom: 0;
  }
}

// // Smartphones (portrait and landscape)
// @media only screen and (min-device-width : 320px) and (max-device-width : 480px) {

// }

// // Smartphones (landscape)
// @media only screen and (min-width : 321px) {

// }

// // Smartphones (portrait)
// @media only screen and (max-width : 320px) {

// }

// // iPads (portrait and landscape)
// @media only screen and (min-device-width : 768px) and (max-device-width : 1024px) {

// }

// // iPads (landscape)
// @media only screen and (min-device-width : 768px) and (max-device-width : 1024px) and (orientation : landscape) {

// }

// // iPads (portrait)
// @media only screen and (min-device-width : 768px) and (max-device-width : 1024px) and (orientation : portrait) {

// }

// //  iPad 3
// @media only screen and (min-device-width : 768px) and (max-device-width : 1024px) and (orientation : landscape) and (-webkit-min-device-pixel-ratio : 2) {

// }

// @media only screen and (min-device-width : 768px) and (max-device-width : 1024px) and (orientation : portrait) and (-webkit-min-device-pixel-ratio : 2) {

// }
// // Desktops and laptops
// @media only screen  and (min-width : 1224px) {

// }

// // Large screens
// @media only screen  and (min-width : 1824px) {

// }

// // iPhone 4
// @media only screen and (min-device-width : 320px) and (max-device-width : 480px) and (orientation : landscape) and (-webkit-min-device-pixel-ratio : 2) {

// }

// @media only screen and (min-device-width : 320px) and (max-device-width : 480px) and (orientation : portrait) and (-webkit-min-device-pixel-ratio : 2) {

// }

// // iPhone 5
// @media only screen and (min-device-width: 320px) and (max-device-height: 568px) and (orientation : landscape) and (-webkit-device-pixel-ratio: 2){

// }

// @media only screen and (min-device-width: 320px) and (max-device-height: 568px) and (orientation : portrait) and (-webkit-device-pixel-ratio: 2){

// }

// // iPhone 6
// @media only screen and (min-device-width: 375px) and (max-device-height: 667px) and (orientation : landscape) and (-webkit-device-pixel-ratio: 2){

// }

// @media only screen and (min-device-width: 375px) and (max-device-height: 667px) and (orientation : portrait) and (-webkit-device-pixel-ratio: 2){

// }

// // iPhone 6+
// @media only screen and (min-device-width: 414px) and (max-device-height: 736px) and (orientation : landscape) and (-webkit-device-pixel-ratio: 2){

// }

// @media only screen and (min-device-width: 414px) and (max-device-height: 736px) and (orientation : portrait) and (-webkit-device-pixel-ratio: 2){

// }

// // Samsung Galaxy S3
// @media only screen and (min-device-width: 320px) and (max-device-height: 640px) and (orientation : landscape) and (-webkit-device-pixel-ratio: 2){

// }

// @media only screen and (min-device-width: 320px) and (max-device-height: 640px) and (orientation : portrait) and (-webkit-device-pixel-ratio: 2){

// }

// // Samsung Galaxy S4
// @media only screen and (min-device-width: 320px) and (max-device-height: 640px) and (orientation : landscape) and (-webkit-device-pixel-ratio: 3){

// }

// @media only screen and (min-device-width: 320px) and (max-device-height: 640px) and (orientation : portrait) and (-webkit-device-pixel-ratio: 3){

// }

// // Samsung Galaxy S5
// @media only screen and (min-device-width: 360px) and (max-device-height: 640px) and (orientation : landscape) and (-webkit-device-pixel-ratio: 3){

// }

// @media only screen and (min-device-width: 360px) and (max-device-height: 640px) and (orientation : portrait) and (-webkit-device-pixel-ratio: 3){

// }
